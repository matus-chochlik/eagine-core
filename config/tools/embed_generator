#!/usr/bin/python3
# coding: UTF-8
#  Copyright (c) 2020 Matus Chochlik

import os
import re
import sys
import gzip
import zlib
import argparse
# ------------------------------------------------------------------------------
class EmberArgumentParser(argparse.ArgumentParser):
    # --------------------------------------------------------------------------
    def _positive_int(self, x):
        try:
            assert(int(x) > 0)
            return int(x)
        except:
            self.error("`%s' is not a positive integer value" % str(x))

    # --------------------------------------------------------------------------
    def __init__(self, **kw):
        argparse.ArgumentParser.__init__(self, **kw)

        self.add_argument(
            '-p', '--packed',
            dest='packed',
            default=False,
            action="store_true"
        )

        self.add_argument(
            '-i', '--input',
            metavar='INPUT-FILE',
            nargs='?',
            type=os.path.realpath,
            default=[],
            action="append"
        )

        self.add_argument(
            '-o', '--output',
            dest='output_path',
            metavar='OUTPUT-FILE',
            nargs='?',
            type=os.path.realpath,
            default=None
        )

        self.add_argument(
            '-s', '--search',
            dest='search_path',
            metavar='DIRECTORY',
            nargs='?',
            type=os.path.realpath,
            default=[],
            action="append"
        )

        self.add_argument(
            '-t', '--target',
            dest='targets',
            metavar=('TARGET', 'RESOURCE-FILE'),
            nargs=2,
            default=[],
            action="append"
        )

        self.add_argument(
            '-l', '--max-line-len',
            dest='max_line_len',
            metavar='COLUMNS',
            nargs='?',
            type=self._positive_int,
            default=80
        )

    # --------------------------------------------------------------------------
    def process_parsed_options(self, options):

        if options.output_path is None:
            options.output = sys.stdout
        else:
            if os.path.isdir(options.output_path):
                options.output_path = os.path.join(
                    options.output_path,
                    'resources.cpp'
                )
            options.output = open(options.output_path, "wt")

        options.target_map = {}
        for target_name, resource_path in options.targets:
            options.target_map[target_name] = resource_path

        return options

    # --------------------------------------------------------------------------
    def parse_args(self):
        return self.process_parsed_options(
            argparse.ArgumentParser.parse_args(self)
        )

# ------------------------------------------------------------------------------
def make_argparser():
    return EmberArgumentParser(
        prog="embed_generator",
        description="""
        makes a compilable C/C++ source file containing
        static embed data from input files.
        """
    )
# ------------------------------------------------------------------------------
def open_resource_file(path):
    exts = os.path.splitext(path)
    if exts[-1] == ".gz":
        return gzip.open(path, "rb")

    return open(path, "rb")
# ------------------------------------------------------------------------------
class PlainResource(object):
    # --------------------------------------------------------------------------
    def __init__(self, path):
        self._path = path
    # --------------------------------------------------------------------------
    def __enter__(self):
        self._fd = open_resource_file(self._path)
        return self
    # --------------------------------------------------------------------------
    def __exit__(self, typ, val, traceback):
        self._fd.close()
    # --------------------------------------------------------------------------
    def byte_size(self):
        return os.stat(self._path).st_size
    # --------------------------------------------------------------------------
    def get_byte(self):
        result = self._fd.read(1)
        if result:
            result = ord(result)
        else:
            result = None
        return result

# ------------------------------------------------------------------------------
class PackedResource(object):
    # --------------------------------------------------------------------------
    def __init__(self, path):
        self._path = path
        self._zipped = []
        self._readpos = -1
    # --------------------------------------------------------------------------
    def __enter__(self):
        with open_resource_file(self._path) as rfd:
            self._zipped = zlib.compress(rfd.read(), zlib.Z_BEST_COMPRESSION)
        return self
    # --------------------------------------------------------------------------
    def __exit__(self, typ, val, traceback):
        del self._zipped
    # --------------------------------------------------------------------------
    def byte_size(self):
        return len(self._zipped)
    # --------------------------------------------------------------------------
    def get_byte(self):
        result = None
        if self._readpos < 0:
            result = 1
            self._readpos = 0
        elif self._readpos < len(self._zipped):
            result = self._zipped[self._readpos]
            self._readpos += 1
        return result

# ------------------------------------------------------------------------------
def load_resource(options, resource_path):
    if options.packed:
        return PackedResource(resource_path)
    return PlainResource(resource_path)

# ------------------------------------------------------------------------------
def fix_res_path(options, path):
    resource_path = options.target_map.get(path, path)
    if not os.path.isfile(resource_path):
        for search_dir in options.search_path:
            if os.path.isfile(os.path.join(search_dir, path)):
                resource_path = os.path.realpath(os.path.join(search_dir, path))
                break
    return resource_path

# ------------------------------------------------------------------------------
def make_res_function(options, ident, path):
    resource_path = fix_res_path(options, path);

    options.output.write(
        'template<> auto get_embedded_resource(\n'+
        '    const selector<id_v("%s")>,\n'
        '    [[maybe_unused]] const string_view path\n'
        ') noexcept -> embedded_resource {\n' % ident
    )
    linelen = 0
    with load_resource(options, resource_path) as res:
        if res.byte_size() > 0:
            options.output.write("#if !defined(__clang_analyzer__)\n")
            options.output.write("        static const byte res[] = {\n")
        
            first = True
            while True:
                byte = res.get_byte()
                if byte is None:
                    break

                temp = ""
                if first:
                    first = False
                    temp += "  "
                else:
                    temp += ", "

                temp += "0x%x" % byte
                
                if linelen > options.max_line_len - 16:
                    linelen = 0
                    temp += "\n"
                else:
                    linelen += len(temp)
                options.output.write(temp)
            options.output.write("\n        };\n")
            options.output.write("        return {view(res), path, %s};\n" % (
                "true" if options.packed else "false"
            ))
            options.output.write("#endif\n")
    options.output.write("    return {};\n")
    options.output.write('} // %s\n' % ident)

# ------------------------------------------------------------------------------
def make_res_code(options, ident, path):

    options.output.write('    if(res_id == identifier{"%s"}) {\n' % ident)
    options.output.write('        return get_embedded_resource(selector<id_v("%s")>{}, path);\n' % ident)
    options.output.write("    }\n")
# ------------------------------------------------------------------------------
def make_prologue(options):
    options.output.write("#if EAGINE_CORE_MODULE || EAGINE_CORE_RESOURCE_MODULE\n");
    options.output.write("module eagine.core.resource;\n");
    options.output.write("import eagine.core.types;\n");
    options.output.write("import eagine.core.memory;\n");
    options.output.write("import eagine.core.identifier;\n");
    options.output.write("#else\n");
    options.output.write("#include <eagine/embed.hpp>\n");
    options.output.write("#endif\n");
    options.output.write("namespace eagine {\n")
    options.output.write("template <identifier_t ResId>\n")
    options.output.write("auto get_embedded_resource(const selector<ResId>, const string_view) noexcept\n")
    options.output.write("  -> embedded_resource;\n")

# ------------------------------------------------------------------------------
def make_epilogue(options):
    options.output.write("} // namespace eagine\n")
# ------------------------------------------------------------------------------
def list_embedded_resources(options):
    embed_res = [
        r'embed<id_v\("([a-zA-Z0-9_]+)"\)>\(\s*("([^"]+)"|__FILE__)\s*\)',
        r'embed\(\s*"([a-zA-Z0-9_]+)",\s*("([^"]+)"|__FILE__)\s*\)',
        r'embed\(\s*identifier[({]"([a-zA-Z0-9_]+)"[})],\s*("([^"]+)"|__FILE__)\s*\)',
        r'embed\(\s*EAGINE_ID\(([a-zA-Z0-9_]+)\),\s*("([^"]+)"|__FILE__)\s*\)'
    ]
    for path in options.input:
        with open(path, "rt") as ifd:
            source = str()
            for line in ifd.readlines():
                source += line
                for embed_re in embed_res:
                    embeds = re.findall(embed_re, source)
                    if embeds:
                        for ident, res_expr, res_path in embeds:
                            if res_expr == "__FILE__":
                                yield ident, path
                            else:
                                yield ident, res_path
                        source = str()
# ------------------------------------------------------------------------------
def make_resource_file(options):
    some_output = False
    res_map = {i:p for (i, p) in list_embedded_resources(options)}
    for identifier, resource_path in res_map.items():
        if not some_output:
            make_prologue(options)
            some_output = True

        make_res_function(options, identifier, resource_path)

    if some_output:
        options.output.write(
            'auto fetch_embedded_resource(\n'
            '    [[maybe_unused]] const identifier res_id,\n'
            '    [[maybe_unused]] const string_view path\n'
            ') noexcept -> embedded_resource {\n'
        )

    for identifier, resource_path in res_map.items():
        make_res_code(options, identifier, resource_path)

    if some_output:
        options.output.write("    return {};\n")
        options.output.write("}\n")
        make_epilogue(options)

# ------------------------------------------------------------------------------
def main():
    make_resource_file(make_argparser().parse_args())
    return 0
# ------------------------------------------------------------------------------
if __name__ == "__main__":
    exit(main())
# ------------------------------------------------------------------------------
