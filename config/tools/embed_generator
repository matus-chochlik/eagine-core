#!/usr/bin/python3
# coding: UTF-8
#  Copyright (c) 2020 Matus Chochlik

import os
import re
import sys
import gzip
import zlib
import argparse
# ------------------------------------------------------------------------------
class EmberArgumentParser(argparse.ArgumentParser):
    # --------------------------------------------------------------------------
    def _positive_int(self, x):
        try:
            assert int(x) > 0
            return int(x)
        except:
            self.error("`%s' is not a positive integer value" % str(x))

    def _identifier(self, x):
        try:
            assert self._ident_re.match(x)
            return x
        except:
            self.error("`%s' is not valid identifier value" % str(x))

    def _id_and_path(self, x):
        try:
            assert (self._ident_re.match(x) or self._target_re.match(x) or os.path.exists(x))
            return x
        except:
            self.error("`%s' is not valid identifier or path" % str(x))

    def _id_and_format(self, x):
        try:
            assert (self._ident_re.match(x) or x in self._formats)
            return x
        except:
            self.error("`%s' is not valid identifier or format" % str(x))

    # --------------------------------------------------------------------------
    def __init__(self, **kw):
        argparse.ArgumentParser.__init__(self, **kw)
        self._ident_re = re.compile("^[A-Za-z0-9_]{1,10}$")
        self._target_re = re.compile("^[A-Za-z0-9_]+$")
        self._formats = [
            "unknowm",
            "xml",
            "json",
            "json_binary",
            "yaml",
            "glsl",
            "cpp",
            "text_utf8"
        ]
        self._ext_formats = {
            ".xml": "xml",
            ".json": "json",
            ".eagimesh": "json",
            ".eagitex": "json",
            ".eagitexi": "json_binary",
            ".yaml": "yaml",
            ".glsl": "glsl",
            ".cpp": "cpp",
            ".txt": "text_utf8"
        }

        self.add_argument(
            '-p', '--packed',
            dest='packed',
            default=False,
            action="store_true"
        )

        self.add_argument(
            '-e', '--enable-search',
            dest='enable_search',
            default=False,
            action="store_true"
        )

        self.add_argument(
            '-i', '--input',
            metavar='INPUT-FILE',
            nargs='?',
            type=os.path.realpath,
            default=[],
            action="append"
        )

        self.add_argument(
            '-I', '--id-input',
            dest='explicit_id_paths',
            metavar=('IDENTIFIER','INPUT-FILE'),
            nargs=2,
            type=self._id_and_path,
            default=[],
            action="append"
        )

        self.add_argument(
            '-F', '--id-format',
            dest='explicit_id_formats',
            metavar=('IDENTIFIER','FORMAT'),
            nargs=2,
            type=self._id_and_format,
            default=[],
            action="append"
        )

        self.add_argument(
            '-o', '--output',
            dest='output_path',
            metavar='OUTPUT-FILE',
            nargs='?',
            type=os.path.realpath,
            default=None
        )

        self.add_argument(
            '-s', '--search',
            dest='search_path',
            metavar='DIRECTORY',
            nargs='?',
            type=os.path.realpath,
            default=[],
            action="append"
        )

        self.add_argument(
            '-g', '--generate-switch',
            dest='switch_identifiers',
            metavar='IDENTIFIER',
            nargs='?',
            type=self._identifier,
            default=[],
            action="append"
        )

        self.add_argument(
            '-t', '--target',
            dest='targets',
            metavar=('TARGET', 'RESOURCE-FILE'),
            nargs=2,
            default=[],
            action="append"
        )

        self.add_argument(
            '-l', '--max-line-len',
            dest='max_line_len',
            metavar='COLUMNS',
            nargs='?',
            type=self._positive_int,
            default=80
        )

    # --------------------------------------------------------------------------
    def process_parsed_options(self, options):

        if options.output_path is None:
            options.output = sys.stdout
        else:
            if os.path.isdir(options.output_path):
                options.output_path = os.path.join(
                    options.output_path,
                    'resources.cpp'
                )
            options.output = open(options.output_path, "wt")

        options.target_map = {}
        for target_name, resource_path in options.targets:
            options.target_map[target_name] = resource_path

        options.format_map = {}
        for res_id, path_or_target in options.explicit_id_paths:
            try:
                res_path = options.target_map[path_or_target]
            except KeyError:
                res_path = path_or_target
            for ext, res_kind in self._ext_formats.items():
                if res_path.endswith(ext):
                    options.format_map[res_id] = res_kind
                    break

        return options

    # --------------------------------------------------------------------------
    def parse_args(self):
        return self.process_parsed_options(
            argparse.ArgumentParser.parse_args(self)
        )

# ------------------------------------------------------------------------------
def make_argparser():
    return EmberArgumentParser(
        prog="embed_generator",
        description="""
        makes a compilable C/C++ source file containing
        static embed data from input files.
        """
    )
# ------------------------------------------------------------------------------
def open_resource_file(path):
    exts = os.path.splitext(path)
    if exts[-1] == ".gz":
        return gzip.open(path, "rb")

    return open(path, "rb")
# ------------------------------------------------------------------------------
class PlainResource(object):
    # --------------------------------------------------------------------------
    def __init__(self, path):
        self._path = path
    # --------------------------------------------------------------------------
    def __enter__(self):
        self._fd = open_resource_file(self._path)
        return self
    # --------------------------------------------------------------------------
    def __exit__(self, typ, val, traceback):
        self._fd.close()
    # --------------------------------------------------------------------------
    def byte_size(self):
        return os.stat(self._path).st_size
    # --------------------------------------------------------------------------
    def get_byte(self):
        result = self._fd.read(1)
        if result:
            result = ord(result)
        else:
            result = None
        return result

# ------------------------------------------------------------------------------
class PackedResource(object):
    # --------------------------------------------------------------------------
    def __init__(self, path):
        self._path = path
        self._zipped = []
        self._readpos = -1
    # --------------------------------------------------------------------------
    def __enter__(self):
        with open_resource_file(self._path) as rfd:
            self._zipped = zlib.compress(rfd.read(), zlib.Z_BEST_COMPRESSION)
        return self
    # --------------------------------------------------------------------------
    def __exit__(self, typ, val, traceback):
        del self._zipped
    # --------------------------------------------------------------------------
    def byte_size(self):
        return len(self._zipped)
    # --------------------------------------------------------------------------
    def get_byte(self):
        result = None
        if self._readpos < 0:
            result = 1
            self._readpos = 0
        elif self._readpos < len(self._zipped):
            result = self._zipped[self._readpos]
            self._readpos += 1
        return result

# ------------------------------------------------------------------------------
def load_resource(options, resource_path):
    if options.packed:
        return PackedResource(resource_path)
    return PlainResource(resource_path)

# ------------------------------------------------------------------------------
def fix_res_path(options, path):
    resource_path = options.target_map.get(path, path)
    if not os.path.isfile(resource_path):
        for search_dir in options.search_path:
            if os.path.isfile(os.path.join(search_dir, path)):
                resource_path = os.path.realpath(os.path.join(search_dir, path))
                break
    return resource_path

# ------------------------------------------------------------------------------
def make_res_function(options, ident, path):
    resource_path = fix_res_path(options, path);

    options.output.write(
        'template<> auto get_embedded_resource(\n'+
        '    const selector<id_v("%s")>,\n'
        '    [[maybe_unused]] const string_view path\n'
        ') noexcept -> embedded_resource {\n' % ident
    )
    linelen = 0
    is_empty = True
    with load_resource(options, resource_path) as res:
        if res.byte_size() > 0:
            is_empty = False
            options.output.write("#if !defined(__clang_analyzer__)\n")
            options.output.write("        static const byte res[] = {\n")
        
            first = True
            while True:
                byte = res.get_byte()
                if byte is None:
                    break

                temp = ""
                if first:
                    first = False
                    temp += "  "
                else:
                    temp += ", "

                temp += "0x%x" % byte
                
                if linelen > options.max_line_len - 16:
                    linelen = 0
                    temp += "\n"
                else:
                    linelen += len(temp)
                options.output.write(temp)
            options.output.write("\n        };\n")
            options.output.write("        return {view(res), path, embedded_resource_format::%s, %s};\n" % (
                options.format_map.get(ident, "unknown"),
                "true" if options.packed else "false"
            ))
            options.output.write("#else\n")
    options.output.write("    return {};\n")
    if not is_empty:
        options.output.write("#endif\n")
    options.output.write('} // %s\n' % ident)

# ------------------------------------------------------------------------------
def make_prologue(options):
    options.output.write("module eagine.core.resource;\n");
    options.output.write("import eagine.core.types;\n");
    options.output.write("import eagine.core.memory;\n");
    options.output.write("import eagine.core.identifier;\n");
    options.output.write("import <array>;\n");
    options.output.write("namespace eagine {\n")
    options.output.write("template <identifier_t ResId>\n")
    options.output.write("auto get_embedded_resource(const selector<ResId>, const string_view) noexcept\n")
    options.output.write("  -> embedded_resource;\n")

# ------------------------------------------------------------------------------
def make_switch_function(options, res_map):
    options.output.write("auto search_embedded_resource(identifier_t res_id) noexcept\n")
    options.output.write("  -> embedded_resource {\n")
    options.output.write("    switch(res_id) {\n")

    idents = set(options.switch_identifiers)

    for ident in idents:
        options.output.write('        case id_v("%s"):\n' % ident)
        options.output.write('            return get_embedded_resource(selector<id_v("%s")>{}, {"%s"});\n' % (
            ident, res_map.get(ident, "")))

    options.output.write("        default: break;\n")
    options.output.write("    }\n")
    options.output.write("    return {};\n")
    options.output.write("}\n")
    options.output.write("auto embedded_resource_ids() noexcept -> span<const identifier_t> {\n")
    options.output.write("    static const std::array<identifier_t, %d> ids{{\n" % len(idents))
    options.output.write("        ")

    first = True
    for ident in idents:
        if first:
            first = False
        else:
            options.output.write(', ')
        options.output.write('id_v("%s")' % ident)

    options.output.write("\n    }};\n")
    options.output.write("    return view(ids);\n")
    options.output.write("}\n")
    options.output.write("#if defined(__GNUC__)\n")
    options.output.write('} extern "C" {\n')
    options.output.write("struct eagine_embedded_resource_info {\n")
    options.output.write("    const char* src_path;\n")
    options.output.write("    long src_path_len;\n")
    options.output.write("    const unsigned char* data_pointer;\n")
    options.output.write("    long data_size;\n")
    options.output.write("    uint8_t format;\n")
    options.output.write("    bool is_packed;\n")
    options.output.write("};\n")
    options.output.write('__attribute__((visibility("default")))\n')
    options.output.write("eagine_embedded_resource_info eagine_search_embedded_resource(uint64_t res_id) {\n")
    options.output.write("    const auto resource{eagine::search_embedded_resource(res_id)};\n")
    options.output.write("    eagine_embedded_resource_info result{\n")
    options.output.write("        .src_path = resource.source_path().data(),\n")
    options.output.write("        .src_path_len = resource.source_path().size(),\n")
    options.output.write("        .data_pointer = resource.embedded_block().data(),\n")
    options.output.write("        .data_size = resource.embedded_block().size(),\n")
    options.output.write("        .format = static_cast<uint8_t>(resource.format()),\n")
    options.output.write("        .is_packed = resource.is_packed()\n")
    options.output.write("    };\n")
    options.output.write("    return result;\n")
    options.output.write("}\n")
    options.output.write("struct eagine_embedded_resources_list {\n")
    options.output.write("    const uint64_t* begin;\n")
    options.output.write("    const uint64_t* end;\n")
    options.output.write("};\n")
    options.output.write('__attribute__((visibility("default")))\n')
    options.output.write("eagine_embedded_resources_list eagine_embedded_resource_ids() {\n")
    options.output.write("    const auto list{eagine::embedded_resource_ids()};\n")
    options.output.write("    eagine_embedded_resources_list result{\n")
    options.output.write("        .begin = list.data(),\n")
    options.output.write("        .end = list.data() + list.size()\n")
    options.output.write("    };\n")
    options.output.write("    return result;\n")
    options.output.write("}\n")
    options.output.write("} namespace eagine {\n")
    options.output.write("#endif\n")
# ------------------------------------------------------------------------------
def make_epilogue(options):
    options.output.write("} // namespace eagine\n")
# ------------------------------------------------------------------------------
def list_embedded_resources(options):
    for ident, path in options.explicit_id_paths:
        yield ident, path

    embed_res = [
        r'embed<"([a-zA-Z0-9_]+)">\(\s*("([^"]+)"|__FILE__)\s*\)',
        r'embed<id_v\("([a-zA-Z0-9_]+)"\)>\(\s*("([^"]+)"|__FILE__)\s*\)'
    ]
    for path in options.input:
        with open(path, "rt") as ifd:
            source = str()
            for line in ifd.readlines():
                source += line
                for embed_re in embed_res:
                    embeds = re.findall(embed_re, source)
                    if embeds:
                        for ident, res_expr, res_path in embeds:
                            if res_expr == "__FILE__":
                                options.format_map[ident] = "cpp"
                                yield ident, path
                            else:
                                yield ident, res_path
                        source = str()
# ------------------------------------------------------------------------------
def make_resource_file(options):
    some_output = False
    res_map = {i:p for (i, p) in list_embedded_resources(options)}
    for identifier, resource_path in res_map.items():
        if not some_output:
            make_prologue(options)
            some_output = True
        if options.enable_search:
            options.switch_identifiers.append(identifier)
        make_res_function(options, identifier, resource_path)

    if options.switch_identifiers:
        if not some_output:
            make_prologue(options)
            some_output = True
        make_switch_function(options, res_map)

    if some_output:
        make_epilogue(options)

# ------------------------------------------------------------------------------
def main():
    make_resource_file(make_argparser().parse_args())
    return 0
# ------------------------------------------------------------------------------
if __name__ == "__main__":
    exit(main())
# ------------------------------------------------------------------------------
