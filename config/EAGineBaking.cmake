#  Copyright Matus Chochlik.
#  Distributed under the Boost Software License, Version 1.0.
#  See accompanying file LICENSE_1_0.txt or copy at
#   http://www.boost.org/LICENSE_1_0.txt
#
define_property(
	TARGET PROPERTY EAGINE_BAKED_RESOURCE_PATH
	BRIEF_DOCS "Path of bake target output"
	FULL_DOCS "Path of a baked resource output file"
)

find_program(GZIP_COMMAND gzip)

function(eagine_add_baked_resource)
	cmake_parse_arguments(
		EAGINE_BAKE
		"TRY_PACK"
		"COMMAND;PREFIX;RES_KIND;RES_NAME;INPUT"
		""
		${ARGN}
	)

	if(TARGET "${EAGINE_TARGET_PREFIX}${EAGINE_BAKE_COMMAND}")
		set(
			EAGINE_BAKE_RES_CONFIG
			"${CMAKE_CURRENT_BINARY_DIR}/${EAGINE_BAKE_RES_NAME}.bake${EAGINE_BAKE_RES_KIND}"
		)
		if(NOT EXISTS "${EAGINE_BAKE_RES_CONFIG}")
			set(
				EAGINE_BAKE_RES_INPUT
				"${CMAKE_CURRENT_SOURCE_DIR}/${EAGINE_BAKE_RES_NAME}.bake${EAGINE_BAKE_RES_KIND}"
			)
			configure_file("${EAGINE_BAKE_RES_INPUT}" "${EAGINE_BAKE_RES_CONFIG}")
		endif()
		set(
			EAGINE_BAKE_RES_OUTPUT
			"${EAGINE_BAKE_RES_NAME}.${EAGINE_BAKE_PREFIX}${EAGINE_BAKE_RES_KIND}"
		)
		file(STRINGS "${EAGINE_BAKE_RES_CONFIG}" EAGINE_BAKE_PARAMETER_STRING)
		string(
			REPLACE "\;" ";"
			EAGINE_BAKE_RAW_PARAMETERS
			${EAGINE_BAKE_PARAMETER_STRING}
		)

		set(EAGINE_BAKE_PARAMETERS)
		set(EAGINE_BAKE_DEPENDENCIES)
		list(APPEND EAGINE_BAKE_DEPENDENCIES ${EAGINE_BAKE_RES_INPUT})
		foreach(ITEM ${EAGINE_BAKE_RAW_PARAMETERS})
			if(EXISTS "${CMAKE_CURRENT_SOURCE_DIR}/${ITEM}")
				list(APPEND EAGINE_BAKE_PARAMETERS "${CMAKE_CURRENT_SOURCE_DIR}/${ITEM}")
				list(APPEND EAGINE_BAKE_DEPENDENCIES "${CMAKE_CURRENT_SOURCE_DIR}/${ITEM}")
			else()
				list(APPEND EAGINE_BAKE_PARAMETERS "${ITEM}")
			endif()
		endforeach()
		list(APPEND EAGINE_BAKE_DEPENDENCIES "${EAGINE_TARGET_PREFIX}${BAKE_COMMAND}")

		list(APPEND EAGINE_BAKE_PARAMETERS "--output")
		list(APPEND EAGINE_BAKE_PARAMETERS "${CMAKE_CURRENT_BINARY_DIR}/${EAGINE_BAKE_RES_OUTPUT}")

		add_custom_command(
			OUTPUT "${CMAKE_CURRENT_BINARY_DIR}/${EAGINE_BAKE_RES_OUTPUT}"
			COMMAND "${EAGINE_TARGET_PREFIX}${EAGINE_BAKE_COMMAND}"
			ARGS ${EAGINE_BAKE_PARAMETERS}
			DEPENDS ${EAGINE_BAKE_DEPENDENCIES}
			COMMENT "Baking resource ${EAGINE_BAKE_RES_OUTPUT}"
		)
		set_source_files_properties(
			"${EAGINE_BAKE_RES_OUTPUT}"
			PROPERTIES GENERATED 1
		)
		set(RES_SUFFIX)

		if(${EAGINE_BAKE_TRY_PACK})
			if(GZIP_COMMAND)
				set(RES_SUFFIX .gz)
				set(GZIP_ARGS)
				list(APPEND GZIP_ARGS -9)
				list(APPEND GZIP_ARGS -f)
				list(APPEND GZIP_ARGS "${EAGINE_BAKE_RES_OUTPUT}")
				list(APPEND GZIP_ARGS -c)
				list(APPEND GZIP_ARGS >)
				list(APPEND GZIP_ARGS "${EAGINE_BAKE_RES_OUTPUT}${RES_SUFFIX}")
				add_custom_command(
					OUTPUT ${EAGINE_BAKE_RES_OUTPUT}${RES_SUFFIX}
					WORKING_DIRECTORY "${CMAKE_CURRENT_BINARY_DIR}"
					COMMAND "${GZIP_COMMAND}"
					ARGS ${GZIP_ARGS}
					DEPENDS ${EAGINE_BAKE_RES_OUTPUT}
					COMMENT "Compressing resource ${EAGINE_BAKE_RES_OUTPUT}"
				)
				set_source_files_properties(
					"${EAGINE_BAKE_RES_OUTPUT}${RES_SUFFIX}"
					PROPERTIES GENERATED 1
				)
			endif()
		endif()

		add_custom_target(
			${EAGINE_BAKE_RES_NAME}
			DEPENDS ${EAGINE_BAKE_RES_OUTPUT}${RES_SUFFIX}
		)
		set_property(
			TARGET ${EAGINE_BAKE_RES_NAME}
			APPEND PROPERTY EAGINE_BAKED_RESOURCE_PATH
			"${CMAKE_CURRENT_BINARY_DIR}/${EAGINE_BAKE_RES_OUTPUT}${RES_SUFFIX}"
		)
	else()
		message(FATAL_ERROR "Invalid bake tool ${EAGINE_BAKE_COMMAND}")
	endif()
endfunction()

